AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Image:
    Type: String
    Default: 992382578140.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest
  ServiceName:
    Type: String
    Default: HelloWorld
  ContainerPort:
    Type: String
    Default: 80
  HealthCheckPath:
    Type: String
    Default: /

Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: Sample2

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Project
          Value: Sample2

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: Sample2

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: Sample2

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: Sample2

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: Sample2

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apprunner.amazonaws.com
                - build.apprunner.amazonaws.com
                - tasks.apprunner.amazonaws.com
                - networking.apprunner.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: AppRunner service role
      Policies:
        - PolicyName: AppRunnerServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      RoleName: !Sub ${ServiceName}-AppRole
      Tags:
        - Key: Project
          Value: Sample2

  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppRunner security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: Sample2

  VpcConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB

  AppRunner:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Ref ServiceName
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
        InstanceRoleArn: !GetAtt AppRole.Arn
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref VpcConnector
        IngressConfiguration:
          IsPubliclyAccessible: True
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRole.Arn
        AutoDeploymentsEnabled: False
        ImageRepository:
          ImageConfiguration:
            Port: '80'
          ImageIdentifier: !Ref Image
          ImageRepositoryType: ECR
